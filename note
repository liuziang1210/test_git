--------------------------
11.22
-------------------------
os.environ.get()
用于批量获取, 读取多个环境变量的值,因为可以使用字典的方式进行访问和遍历
env_variables = {
    'EMAIL_HOST': 'localhost',
    'EMAIL_PORT': '25',
    'EMAIL_USER': 'user@example.com'
}

for var, default in env_variables.items():
  value = os.environ.get(var, default)

os.environ['HOME'] = "/to/your/home" 用于设置环境变量的值

os.getenv()
email_host = os.getenv('EMAIL_HOST', 'localhost')
获取名为 'EMAIL_HOST' 的环境变量的值，如果不存在，则返回默认值 'localhost'
------------------------------------------------
head, tail = os.path.split(path)
将一个路径分割成路径头和路径尾两部分
------------------------------------------
os.remove()
删除文件
-----------------------------------------------
" + "可以用于列表和元组的合并

" + "可以用于添加其他字符
original_str = "World"
new_str = "Hello, " + original_str
print(new_str)  # 输出: "Hello, World"
------------------------------------------------
os.path.enpandvars($HOME)
这个函数扫描路径字符串，并将其中的环境变量替换为它们的实际值
------------------------------------------------
new_string = old_string.strip()
移除字符串开头和结尾的空白字符或者指定字符
lstrip()/ rstrip() 只移除左侧或者右侧的空白字符
---return a new string 

example_string = "   Hello, World!   "
print(example_string.strip())
输出为: "Hello, World!"

example_string_2 = "###Hello, World!###"
print(example_string.strip('#'))
输出为: "Hello, World!"
---------------------------------------------------
array = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

sum_along_axis0 = np.sum(array, axis=0)--> [12, 15, 18]
------------------------------------------------------------
np.all()
检查数组中的所有元素是否都为 True
a = np.all([[True, False], [False, False]]) --> False
没有指定axis参数，np.all会检查数组中的所有元素 

a = np.all([[True, False], [True, False], [True, True], axis=0)
--> [True, False]
a = np.all([[True, False], [True, False], [True, True], axis=1)
--> [False, False, True]

当将多个布尔数组放入一个列表并直接传递给 np.all 时，NumPy 会将这个列表解释为一个二维数组

np.any()
检查数组中的元素是否为 True
a = np.all([[True, False], [True, False], [True, True], axis=1, keepdims=True)
keepdims=True 时，结果数组保持原始数组的维度
------------------------------------------------------------
np.where()
np.where(condition, x, y) 
x: 当 condition 为 True 时，选取的元素数组。
y: 当 condition 为 False 时，选取的元素数组。

np.where(x, y)可以不写条件，默认条件为 True

a = np.arange(10) --> array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
np.where(a < 5, a, 10*a)
--> array([ 0,  1,  2,  3,  4, 50, 60, 70, 80, 90])

np.where(condition)可以只写条件，返回的是索引
np.where(arr!=0)
np.where([True, True, False, True]) --> array([0, 1, 3])
--------------------------------------------------------------
zip()
将多个可迭代对象（如列表、元组等）“压缩”在一起
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
list3 = [True, False, True]

zipped = zip(list1, list2, list3)
print(list(zipped))  --> [(1, 'a', True), (2, 'b', False), (3, 'c', True)]

迭代器在第一次被转换为列表时就已经被消耗掉了，后续的任何操作都无法再次使用这个迭代器

for num, letter, bool_value in zip(list1, list2, list3):
    pass

for index, (num, letter, bool_value) in enumerate(zip(list1, list2, list3)):

解压缩
zipped = list(zip(list1, list2, list3))
list1, list2, list3 = zip(*zipped)
--------------------------------------------------------------
Pandas

df = pd.Dataframe()



--------------------------------------------------------------
Qt




-----------------------------------------------------------------



